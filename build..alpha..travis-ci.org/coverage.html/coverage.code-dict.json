{"/home/travis/build/npmtest/node-npmtest-image-resizer/test.js":"/* istanbul instrument in package npmtest_image_resizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-image-resizer/lib.npmtest_image_resizer.js":"/* istanbul instrument in package npmtest_image_resizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_image_resizer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_image_resizer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-image-resizer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-image-resizer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_image_resizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_image_resizer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_image_resizer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_image_resizer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_image_resizer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_image_resizer.__dirname + '/lib.npmtest_image_resizer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/index.js":"'use strict';\n\nvar env = require('./src/config/environment_vars');\n\nmodule.exports = {\n\n  img: require('./src/image'),\n  streams: require('./src/streams'),\n  sources: require('./src/streams/sources'),\n  filter: require('./src/streams/filter'),\n  modifiers: require('./src/lib/modifiers').map,\n\n  env: env,\n  expressConfig: require('./src/config/' + env.NODE_ENV)\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/config/environment_vars.js":"'use strict';\n\nvar _, vars;\n\n_ = require('lodash');\n\nvars = {\n\n  NODE_ENV: 'development',\n  PORT: 3001,\n  DEFAULT_SOURCE: 's3',\n  EXCLUDE_SOURCES: null, // add comma delimited list\n\n  // Restrict to named modifiers strings only\n  NAMED_MODIFIERS_ONLY: false,\n\n  // AWS keys\n  AWS_ACCESS_KEY_ID: null,\n  AWS_SECRET_ACCESS_KEY: null,\n  AWS_REGION: null,\n  S3_BUCKET: null,\n\n  // Resize options\n  RESIZE_PROCESS_ORIGINAL: true,\n  AUTO_ORIENT: true,\n  REMOVE_METADATA: true,\n\n  // Protect original files by specifying a max image width or height - limits\n  // max height/width in parameters\n  MAX_IMAGE_DIMENSION: null,\n\n  // Color used when padding an image with the 'pad' crop modifier.\n  IMAGE_PADDING_COLOR: 'white',\n\n  // Optimization options\n  IMAGE_PROGRESSIVE: true,\n  IMAGE_QUALITY: 80,\n\n  // Cache expiries\n  IMAGE_EXPIRY: 60 * 60 * 24 * 90,\n  IMAGE_EXPIRY_SHORT: 60 * 60 * 24 * 2,\n  JSON_EXPIRY: 60 * 60 * 24 * 30,\n\n  // Logging options\n  LOG_PREFIX: 'resizer',\n  QUEUE_LOG: true,\n\n  // Response settings\n  CACHE_DEV_REQUESTS: false,\n\n  // Twitter settings\n  TWITTER_CONSUMER_KEY: null,\n  TWITTER_CONSUMER_SECRET: null,\n  TWITTER_ACCESS_TOKEN: null,\n  TWITTER_ACCESS_TOKEN_SECRET: null,\n\n  // Where are the local files kept?\n  LOCAL_FILE_PATH: process.cwd(),\n\n  // Display an image if a 404 request is encountered from a source\n  IMAGE_404: null,\n\n  // Whitelist arbitrary HTTP source prefixes using EXTERNAL_SOURCE_*\n  EXTERNAL_SOURCE_WIKIPEDIA: 'https://upload.wikimedia.org/wikipedia/'\n\n};\n\n_.forEach(vars, function(value, key){\n  var keyType = typeof vars[key];\n\n  if (_.has(process.env, key)){\n    vars[key] = process.env[key];\n\n    if (keyType === 'number') {\n      vars[key] = +(vars[key]);\n    }\n\n    // cast any boolean strings to proper boolean values\n    if (vars[key] === 'true'){\n      vars[key] = true;\n    }\n    if (vars[key] === 'false'){\n      vars[key] = false;\n    }\n  }\n\n});\n\n// Add external sources from environment vars\nvars.externalSources = {};\nObject.keys(vars).concat(Object.keys(process.env)).filter(function(key) {\n  return (/^EXTERNAL_SOURCE_/).test(key);\n}).forEach(function(key) {\n  vars.externalSources[key.substr('EXTERNAL_SOURCE_'.length).toLowerCase()] = process.env[key] || vars[key];\n});\n\n// A few helpers to quickly determine the environment\nvars.development = vars.NODE_ENV === 'development';\nvars.test        = vars.NODE_ENV === 'test';\nvars.production  = vars.NODE_ENV === 'production';\n\n\nmodule.exports = vars;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/image.js":"'use strict';\n\nvar _, Logger, env, modifiers, stream, util, imgType;\n\n_         = require('lodash');\nLogger    = require('./utils/logger');\nenv       = require('./config/environment_vars');\nmodifiers = require('./lib/modifiers');\nstream    = require('stream');\nutil      = require('util');\nimgType   = require('image-type');\n\n\n// Simple stream to represent an error at an early stage, for instance a\n// request to an excluded source.\nfunction ErrorStream(image){\n  stream.Readable.call(this, { objectMode : true });\n  this.image = image;\n}\nutil.inherits(ErrorStream, stream.Readable);\n\nErrorStream.prototype._read = function(){\n  this.push(this.image);\n  this.push(null);\n};\n\n\nfunction Image(request){\n  // placeholder for any error objects\n  this.error = null;\n\n  // set a mark for the start of the process\n  this.mark = Date.now();\n\n  // determine the name and format (mime) of the requested image\n  this.parseImage(request);\n\n  // determine the requested modifications\n  this.modifiers = modifiers.parse(request.path);\n\n  // pull the various parts needed from the request params\n  this.parseUrl(request);\n\n  // placeholder for the buffer/stream coming from s3, will hold the image\n  this.contents = null;\n\n  // placeholder for the size of the original image\n  this.originalContentLength = 0;\n\n  // set the default expiry length, can be altered by a source file\n  this.expiry = env.IMAGE_EXPIRY;\n\n  // all logging strings will be queued here to be written on response\n  this.log = new Logger();\n}\n\nImage.validInputFormats  = ['jpeg', 'jpg', 'gif', 'png', 'webp'];\nImage.validOutputFormats = ['jpeg', 'png', 'webp'];\n\n// Determine the name and format of the requested image\nImage.prototype.parseImage = function(request){\n  var fileStr = _.last(request.path.split('/'));\n  var exts = fileStr.split('.').map( function (item) {\n    return item.toLowerCase();\n  });\n\n  // clean out any metadata format\n  if (exts[exts.length - 1] === 'json') {\n    this.format = exts[exts.length - 2];\n    exts.pop();\n    fileStr = exts.join('.');\n  }\n\n  // if path contains valid output format, remove it from path\n  if (exts.length >= 3) {\n    var inputFormat = exts[exts.length - 2];\n    var outputFormat = exts.pop();\n\n    if (_.indexOf(Image.validInputFormats, inputFormat) > -1 &&\n        _.indexOf(Image.validOutputFormats, outputFormat) > -1) {\n      this.outputFormat = outputFormat;\n      fileStr = exts.join('.');\n    }\n  }\n\n  this.image  = fileStr;\n};\n\n\n// Determine the file path for the requested image\nImage.prototype.parseUrl = function(request){\n  var parts = request.path.replace(/^\\//,'').split('/');\n\n  // overwrite the image name with the parsed version so metadata requests do\n  // not mess things up\n  parts[parts.length - 1] = this.image;\n\n  // if there is a modifier string remove it\n  if (this.modifiers.hasModStr) {\n    parts.shift();\n  }\n\n  this.path = parts.join('/');\n\n  // account for any spaces in the path\n  this.path = decodeURI(this.path);\n};\n\n\nImage.prototype.isError = function(){ return this.error !== null; };\n\n\nImage.prototype.isStream = function(){\n  var Stream = require('stream').Stream;\n  return !!this.contents && this.contents instanceof Stream;\n};\n\n\nImage.prototype.isBuffer = function(){\n  return !!this.contents && Buffer.isBuffer(this.contents);\n};\n\n\nImage.prototype.getFile = function(){\n  var sources = require('./streams/sources'),\n      excludes = env.EXCLUDE_SOURCES ? env.EXCLUDE_SOURCES.split(',') : [],\n      streamType = env.DEFAULT_SOURCE,\n      Stream = null;\n\n  // look to see if the request has a specified source\n  if (_.has(this.modifiers, 'external')){\n    if (_.has(sources, this.modifiers.external)){\n      streamType = this.modifiers.external;\n    } else if (_.has(env.externalSources, this.modifiers.external)) {\n      Stream = sources.external;\n      return new Stream(this, this.modifiers.external, env.externalSources[this.modifiers.external]);\n    }\n  }\n\n  // if this request is for an excluded source create an ErrorStream\n  if (excludes.indexOf(streamType) > -1){\n    this.error = new Error(streamType + ' is an excluded source');\n    Stream = ErrorStream;\n  }\n\n  // if all is well find the appropriate stream\n  else {\n    this.log.log('new stream created!');\n    Stream = sources[streamType];\n  }\n\n  return new Stream(this);\n};\n\n\nImage.prototype.sizeReduction = function(){\n  var size = this.contents.length;\n  return (this.originalContentLength - size)/1000;\n};\n\n\nImage.prototype.sizeSaving = function(){\n  var oCnt = this.originalContentLength,\n      size = this.contents.length;\n  return ((oCnt - size)/oCnt * 100).toFixed(2);\n};\n\n\nImage.prototype.isFormatValid = function () {\n  if (Image.validInputFormats.indexOf(this.format) === -1) {\n    this.error = new Error(\n      'The listed format (' + this.format + ') is not valid.'\n    );\n  }\n};\n\n// Setter/getter for image format that normalizes jpeg formats\nObject.defineProperty(Image.prototype, 'format', {\n  get: function () { return this._format; },\n  set: function (value) {\n    this._format = value.toLowerCase();\n    if (this._format === 'jpg') { this._format = 'jpeg'; }\n  }\n});\n\n// Setter/getter for image contents that determines the format from the content\n// of the image to be processed.\nObject.defineProperty(Image.prototype, 'contents', {\n  get: function () { return this._contents; },\n  set: function (data) {\n    this._contents = data;\n\n    if (this.isBuffer()) {\n      this.format = imgType(data).ext;\n      this.isFormatValid();\n    }\n  }\n});\n\n\nmodule.exports = Image;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/utils/logger.js":"'use strict';\n\nvar env, chalk, _, slice, prefix, queueLog, args;\n\nenv       = require('../config/environment_vars');\nchalk     = require('chalk');\n_         = require('lodash');\nslice     = [].slice;\nprefix    = env.LOG_PREFIX;\nqueueLog  = env.QUEUE_LOG;\n\nchalk.enabled = true;\n\n\nfunction Logger(){\n  this.queue = [];\n  this.times = {};\n  this.queueLog = queueLog;\n}\n\nLogger.prototype.colors = chalk;\n\nLogger.prototype.log = function(){\n  args = slice.call(arguments);\n  if (this.queueLog){\n    this.queue.push({ method: 'log',  args: args });\n  } else {\n    args.unshift('[' + chalk.green(prefix) + ']');\n    console.log.apply(console, args);\n  }\n};\n\nLogger.prototype.error = function(){\n  args = slice.call(arguments);\n  if (this.queueLog){\n    this.queue.push({ method: 'error', args: args });\n  } else {\n    args.unshift('[' + chalk.green(prefix) + ']');\n    console.error.apply(console, args);\n  }\n};\n\nLogger.prototype.time = function(key){\n  if (this.queueLog){\n    this.times[key] = Date.now();\n  } else {\n    key = '[' + chalk.green(prefix) + '] ' + chalk.cyan(key);\n    console.time.call(console, key);\n  }\n};\n\nLogger.prototype.timeEnd = function(key){\n  if (this.queueLog){\n    var time = Date.now() - this.times[key];\n    this.queue.push({ method: 'time', key: key, time: time });\n  } else {\n    key = '[' + chalk.green(prefix) + '] ' + chalk.cyan(key);\n    console.timeEnd.call(console, key);\n  }\n};\n\nLogger.prototype.flush = function(){\n  if (this.queue.length === 0){\n    return;\n  }\n\n  console.log('');\n  _.each(this.queue, function(item){\n    var log = '';\n    log += '[' + chalk.green(prefix) + '] ';\n    switch(item.method){\n    case 'log':\n      _.each(item.args, function(arg){\n        log += arg.toString() + ' ';\n      });\n      break;\n    case 'error':\n      _.each(item.args, function(arg){\n        log += chalk.red(arg.toString()) + ' ';\n      });\n      break;\n    case 'time':\n      log += chalk.cyan(\n        item.key + ' - ' + chalk.bold(item.time.toString()) + 'ms'\n      );\n      break;\n    }\n    console.log(log);\n  });\n\n};\n\n\nmodule.exports = Logger;","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/lib/modifiers.js":"/**\nImage modifier utilities\n\nSample modifier strings, separated by a dash\n\n  - /s50/path/to/image.png\n  - /s50-gne/path/to/image.png\n  - /w300-h200/path/to/image.png\n  - /image.jpg\n  - /path/to/image.png\n  - /path/to/image.png.json\n\n\nSupported modifiers are:\n\n  - height:       eg. h500\n  - width:        eg. w200\n  - square:       eg. s50\n  - crop:         eg. cfill\n  - top:          eg. y12\n  - left:         eg. x200\n  - gravity:      eg. gs, gne\n  - filter:       eg. fsepia\n  - external:     eg. efacebook\n  - quality:      eg. q90\n\nCrop modifiers:\n  fit\n     - maintain original proportions\n     - resize so image fits wholly into new dimensions\n         - eg: h400-w500 - 400x600 -> 333x500\n     - default option\n  fill\n     - maintain original proportions\n     - resize via smallest dimension, crop the largest\n     - crop image all dimensions that dont fit\n         - eg: h400-w500 - 400x600 -> 400x500\n  cut\n     - maintain original proportions\n     - no resize, crop to gravity or x/y\n  scale\n     - do not maintain original proportions\n     - force image to be new dimensions (squishing the image)\n  pad\n     - maintain original proportions\n     - resize so image fits wholly into new dimensions\n     - padding added on top/bottom or left/right as needed (color is configurable)\n\n*/\n'use strict';\n\n\nvar _, string, filters, sources, filterKeys, sourceKeys, modifierMap,\n    modKeys, env, environment, fs, namedModifierMap;\n\n_          = require('lodash');\nstring     = require('../utils/string');\nfilters    = require('../streams/filters');\nsources    = require('../streams/sources');\nfilterKeys = _.keys(filters);\nenvironment = require('../config/environment_vars');\nsourceKeys = _.keys(sources).concat(_.keys(environment.externalSources));\nfs         = require('fs');\n\n\nmodifierMap = [\n  {\n    key: 'h',\n    desc: 'height',\n    type: 'integer'\n  },\n  {\n    key: 'w',\n    desc: 'width',\n    type: 'integer'\n  },\n  {\n    key: 's',\n    desc: 'square',\n    type: 'integer'\n  },\n  {\n    key: 'y',\n    desc: 'top',\n    type: 'integer'\n  },\n  {\n    key: 'x',\n    desc: 'left',\n    type: 'integer'\n  },\n  {\n    key: 'g',\n    desc: 'gravity',\n    type: 'string',\n    values: ['c','n','s','e','w','ne','nw','se','sw'],\n    default: 'c'\n  },\n  {\n    key: 'c',\n    desc: 'crop',\n    type: 'string',\n    values: ['fit','fill','cut','scale','pad'],\n    default: 'fit'\n  },\n  {\n    key: 'e',\n    desc: 'external',\n    type: 'string',\n    values: sourceKeys,\n    default: environment.DEFAULT_SOURCE\n  },\n  {\n    key: 'f',\n    desc: 'filter',\n    type: 'string',\n    values: filterKeys\n  },\n  {\n    key: 'q',\n    desc: 'quality',\n    type: 'integer',\n    range: [1, 100],\n    default: environment.IMAGE_QUALITY\n  }\n];\n\nexports.map = modifierMap;\n\nmodKeys = _.map(modifierMap, function(value){\n  return value.key;\n});\n\n\nfunction inArray(key, array){\n  return _.indexOf(array, key) > -1;\n}\n\nfunction getModifier(key){\n  var i, mod;\n\n  for (i in modifierMap){\n    mod = modifierMap[i];\n    if (mod.key === key){\n      return mod;\n    }\n  }\n  return null;\n}\n\nexports.mod = getModifier;\n\n// Check to see if there is a config file of named modifier aliases\nif (fs.existsSync(process.cwd() + '/named_modifiers.json')){\n  var file = fs.readFileSync(process.cwd() + '/named_modifiers.json');\n  namedModifierMap = JSON.parse(file);\n}\n\n\n// Take an array of modifiers and parse the keys and values into mods hash\nfunction parseModifiers(mods, modArr) {\n  var key, value, mod;\n\n  _.each(modArr, function(item){\n    key = item[0];\n    value = item.slice(1);\n\n    if (inArray(key, modKeys)){\n\n      // get the modifier object that responds to the listed key\n      mod = getModifier(key);\n\n      //this is a limit enforced by sharp. the application will crash without\n      //these checks.\n      var dimensionLimit = 16383;\n\n      switch(mod.desc){\n      case 'height':\n        mods.height = string.sanitize(value);\n        if (mods.height > dimensionLimit) {\n          mods.height = dimensionLimit;\n        }\n        mods.hasModStr = true;\n        break;\n      case 'width':\n        mods.width = string.sanitize(value);\n        if (mods.width > dimensionLimit) {\n          mods.width = dimensionLimit;\n        }\n        mods.hasModStr = true;\n        break;\n      case 'square':\n        mods.action = 'square';\n        mods.height = string.sanitize(value);\n        mods.width = string.sanitize(value);\n        mods.hasModStr = true;\n        break;\n      case 'gravity':\n        value = string.sanitize(value, 'alpha');\n        if (inArray(value.toLowerCase(), mod.values)){\n          mods.gravity = value.toLowerCase();\n        }\n        mods.hasModStr = true;\n        break;\n      case 'top':\n        mods.y = string.sanitize(value);\n        mods.hasModStr = true;\n        break;\n      case 'left':\n        mods.x = string.sanitize(value);\n        mods.hasModStr = true;\n        break;\n      case 'crop':\n        value = string.sanitize(value, 'alpha');\n        if (inArray(value.toLowerCase(), mod.values)){\n          mods.crop = value.toLowerCase();\n        }\n        mods.hasModStr = true;\n        break;\n      case 'external':\n        value = string.sanitize(value, 'alphanumeric');\n        if (inArray(value.toLowerCase(), mod.values)){\n          mods.external = value.toLowerCase();\n        }\n        mods.hasModStr = true;\n        break;\n      case 'filter':\n        value = string.sanitize(value, 'alpha');\n        if (inArray(value.toLowerCase(), mod.values)){\n          mods.filter = value.toLowerCase();\n        }\n        mods.hasModStr = true;\n        break;\n      case 'quality':\n        value = string.sanitize(value);\n        if(!isNaN(value)) {\n          var min = mod.range[0],\n            max = mod.range[1];\n          mods.quality = Math.max(min, Math.min(max, value));\n        }\n        mods.hasModStr = true;\n        break;\n      }\n\n    }\n  });\n\n  return mods;\n}\n\n/**\n * @param {Object} mods\n * @return {Object} mods with limited width /height\n */\nvar limitMaxDimension = function(mods, env){\n  // check to see if\n  // a max image dimension has been specified\n  // and limits the current dimension to that maximum\n  var limitDimension = function(dimension, mods){\n    if(!env.MAX_IMAGE_DIMENSION){\n      return mods;\n    }\n    var maxDimension = parseInt(env.MAX_IMAGE_DIMENSION, 10);\n    if(dimension in mods && mods[dimension] > 0){\n      mods[dimension] = Math.min(maxDimension, mods[dimension]);\n    }else{\n      mods[dimension] = maxDimension;\n    }\n    if(mods.action === 'original'){\n      // override to 'resizeOriginal' type\n      mods.action = 'resizeOriginal';\n    }\n    return mods;\n  };\n\n  // limit height and width\n  // in the mods\n  mods = limitDimension(\n    'width',\n    limitDimension(\n      'height', mods\n    )\n  );\n  return mods;\n};\n\n// Exposed method to parse an incoming URL for modifiers, can add a map of\n// named (preset) modifiers if need be (mostly just for unit testing). Named\n// modifiers are usually added via config json file in root of application.\nexports.parse = function(requestUrl, namedMods, envOverride){\n  // override 'env' for testing\n  if(typeof envOverride !== 'undefined'){\n    env = _.clone(envOverride);\n  } else {\n    env = _.clone(environment);\n  }\n\n  var segments, mods, modStr, image, gravity, crop, quality;\n\n  gravity   = getModifier('g');\n  crop      = getModifier('c');\n  quality   = getModifier('q');\n  segments  = requestUrl.replace(/^\\//,'').split('/');\n  modStr    = _.first(segments);\n  image     = _.last(segments).toLowerCase();\n  namedMods = typeof namedMods === 'undefined' ? namedModifierMap : namedMods;\n\n\n  // set the mod keys and defaults\n  mods = {\n    action: 'original',\n    height: null,\n    width: null,\n    gravity: gravity.default,\n    crop: crop.default,\n    quality: quality.default,\n    hasModStr: false\n  };\n\n  // check the request to see if it includes a named modifier\n  if (namedMods && !_.isEmpty(namedMods)){\n    if (_.has(namedMods, modStr)){\n      _.forEach(namedMods[modStr], function(value, key){\n        if (key === 'square'){\n          mods.action = 'square';\n          mods.height = value;\n          mods.width = value;\n        } else {\n          mods[key] = value;\n        }\n      });\n    }\n  }\n\n  // check the request for available modifiers, unless we are restricting to\n  // only named modifiers.\n  if (!env.NAMED_MODIFIERS_ONLY) {\n    mods = parseModifiers(mods, modStr.split('-'));\n  }\n\n\n  // check to see if this a metadata call, it trumps all other requested mods\n  if (image.slice(-5) === '.json'){\n    mods.action = 'json';\n    return mods;\n  }\n\n  if (mods.action === 'square'){\n    // make sure crop is set to the default\n    mods.crop = 'fill';\n    return limitMaxDimension(mods, env);\n  }\n\n  if (mods.height !== null || mods.width !== null){\n    mods.action = 'resize';\n\n    if (mods.crop !== crop.default){\n      mods.action = 'crop';\n    }\n    if (mods.gravity !== gravity.default) {\n      mods.action = 'crop';\n    }\n    if (_.has(mods, 'x') || _.has(mods, 'y')) {\n      mods.action = 'crop';\n    }\n  }\n\n  return limitMaxDimension(mods, env);\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/utils/string.js":"'use strict';\n\n\nexports.sanitize = function(value, type) {\n  if (typeof type === 'undefined') {\n    type = 'number';\n  }\n  switch (type) {\n  case 'number':\n    return value.toString().replace(/[^0-9]/, '') * 1;\n  case 'alphanumeric':\n    return value.replace(/[^a-z0-9]/i, '');\n  case 'alpha':\n    return value.replace(/[^a-z]/i, '');\n  default:\n    return value.replace(/[^0-9]/, '');\n  }\n};\n\n\nexports.camelCase = function(input){\n  return input.toLowerCase()\n    .replace(/_(.)/g, function(match, letter){\n      return letter.toUpperCase();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/filters/index.js":"'use strict';\n\nvar path, fs, cwd, dir, files, modules, pluginDir;\n\npath      = require('path');\nfs        = require('fs');\ncwd       = process.cwd();\ndir       = __dirname.split('/').slice(-1)[0];\npluginDir = [cwd, 'plugins', dir].join('/');\nmodules   = {};\n\n\n// get all the files from this directory\nfiles = require('glob').sync(__dirname + '/*.js');\nfor (var i=0; i < files.length; i++){\n  var mod = path.basename(files[i], '.js');\n  if ( mod !== 'index' ){\n    modules[mod] = require(files[i]);\n  }\n}\n\n// get all the files from the current working directory and override the local\n// ones with any custom plugins\nif (fs.existsSync(pluginDir)){\n  files = require('glob').sync(pluginDir + '/*.js');\n  for (var i=0; i < files.length; i++){\n    var mod = path.basename(files[i], '.js');\n    if ( mod !== 'index' ){\n      modules[mod] = require(files[i]);\n    }\n  }\n}\n\n\nmodule.exports = modules;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/filters/blur.js":"'use strict';\n\nvar sharp = require('sharp');\n\n\nmodule.exports = function(image, callback){\n\n  // create the sharp object\n  var r = sharp(image.contents);\n\n  // apply the filter and pass on the stream\n  r.blur(10).toBuffer(callback);\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/bin/image_resizer.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar program, path, fs, mkdirp, pkg, chalk, _, exec;\n\n\nprogram = require('commander');\nfs      = require('fs');\nmkdirp  = require('mkdirp');\npath    = require('path');\nchalk   = require('chalk');\npkg     = require('../package.json');\n_       = require('lodash');\nexec    = require('child_process').exec;\n\n/**\nFile/Directory helper functions\n*/\nfunction write(path, str, mode) {\n  fs.writeFileSync(path, str, { mode: mode || '0666' });\n  console.log('    ' + chalk.green('create') + ': ' + path);\n}\n\nfunction copy(from, to) {\n  write(to, fs.readFileSync(from, 'utf-8'));\n}\n\nfunction mkdir(path, fn) {\n  mkdirp.sync(path, '0755');\n  console.log('    ' + chalk.green('create') + ': ' + path);\n}\n\nfunction emptyDirectory(path, fn) {\n  fs.readdir(path, function(err, files){\n    if (err && 'ENOENT' !== err.code) {\n      throw err;\n    }\n    fn(!files || !files.length);\n  });\n}\n\nfunction createApplicationAt(dir){\n  var appName, newPkg;\n\n  // Determine the app name from the directory\n  appName = path.basename(path.resolve(dir));\n\n  console.log('\\n' + chalk.cyan('Creating new ') + chalk.cyan.bold('image-resizer') + chalk.cyan(' app!'));\n  console.log();\n\n  // create a new package.json\n  newPkg = {\n    name: appName,\n    version: '1.0.0',\n    main: 'index.js',\n    description: 'My awesome image resizing service!',\n    engines: {\n      'node': pkg.engines.node\n    },\n    dependencies: {\n      'image-resizer': '~' + pkg.version,\n      'express': pkg.dependencies.express,\n      'lodash': pkg.dependencies.lodash,\n      'chalk': pkg.dependencies.chalk,\n      'sharp': pkg.dependencies.sharp\n    },\n    devDependencies: pkg.devDependencies\n  };\n\n  write(dir + '/package.json', JSON.stringify(newPkg, null, 2));\n\n  // create index.js\n  var indexTmpl = fs.readFileSync(__dirname + '/./templates/index.js.tmpl');\n  write(dir + '/index.js', _.template(indexTmpl, {}));\n\n  // create the gulpfile\n  copy(__dirname + '/./templates/gulpfile.js.tmpl', dir + '/gulpfile.js');\n\n  // create .env\n  var envTmpl = fs.readFileSync(__dirname + '/./templates/.env.tmpl');\n  write(dir + '/.env', _.template(envTmpl, {cwd: process.cwd()}));\n\n  // create .gitignore\n  copy(__dirname + '/./templates/.gitignore.tmpl', dir + '/.gitignore');\n\n  // create .jshintrc\n  copy(__dirname + '/../.jshintrc', dir + '/.jshintrc');\n\n  // create Heroku files\n  copy(__dirname + '/./templates/.buildpacks.tmpl', dir + '/.buildpacks');\n  copy(__dirname + '/./templates/Procfile.tmpl', dir + '/Procfile');\n\n  // create a README\n  copy(__dirname + '/./templates/README.md.tmpl', dir + '/README.md');\n\n  // create plugin folders\n  //  - sources\n  //  - filters\n  mkdir(dir + '/plugins/sources');\n  mkdir(dir + '/plugins/filters');\n\n\n  console.log();\n  console.log(chalk.green('   now install your dependencies') + ':');\n  console.log('     $ npm install');\n  console.log();\n  console.log(chalk.green('   then to run the app locally') + ':');\n  console.log('     $ gulp watch');\n  console.log();\n\n  exec('vips --version', function (err, stdout, stderr) {\n    if (err || stderr) {\n      console.log(chalk.yellow('   looks like vips is also missing, run the following to install') + ':');\n      console.log('     $ ./node_modules/image_resizer/node_modules/sharp/preinstall.sh');\n      console.log();\n    }\n\n    console.log(chalk.yellow('   to get up and running on Heroku') + ':');\n    console.log('     https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction');\n    console.log();\n  });\n}\n\n/**\nCreate the program and list the possible commands\n*/\nprogram.version(pkg.version);\nprogram.option('-f, --force', 'force app build in an non-empty directory');\nprogram.command('new')\n  .description('Create new clean image-resizer app')\n  .action( function () {\n    var path = '.';\n    emptyDirectory(path, function(empty) {\n      if (empty || program.force){\n        createApplicationAt(path);\n      }\n      else {\n        console.log(\n          chalk.red('\\n    The current directory is not empty, please use the force (-f) option to proceed.\\n')\n        );\n      }\n    });\n  });\nprogram.command('filter <name>')\n  .description('Create new filter stream')\n  .action( function (filterName) {\n    copy(__dirname + '/./templates/filter.js.tmpl', './plugins/filters/' + filterName + '.js');\n  });\nprogram.parse(process.argv);\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/gulpfile.js":"'use strict';\n\nvar gulp = require('gulp'),\n    nodemon = require('gulp-nodemon'),\n    mocha = require('gulp-mocha'),\n    jshint = require('gulp-jshint'),\n    stylish = require('jshint-stylish'),\n    util = require('gulp-util'),\n    bump = require('gulp-bump'),\n    _ = require('lodash');\n\n\ngulp.task('lint', function () {\n  gulp.src(['src/**/*.js', 'index.js', 'test.js', 'gulpfile.js'])\n    .pipe(jshint('.jshintrc'))\n    .pipe(jshint.reporter(stylish));\n});\ngulp.task('lint:watch', ['lint'], function(){\n  gulp.watch(\n    ['src/**/*.js', 'bin/**/*.js'],\n    function(event){\n      util.log('file changed:', util.colors.green(event.path));\n      gulp.src(event.path)\n        .pipe(jshint('.jshintrc'))\n        .pipe(jshint.reporter(stylish));\n    }\n  );\n});\n\ngulp.task('test', function () {\n  gulp.src('test/**/*.js')\n    .pipe(mocha({reporter: 'nyan'}))\n    .on('error', function(err){\n      console.log(err.toString());\n      this.emit('end');\n    });\n});\ngulp.task('test:watch', ['lint', 'test'], function (){\n  gulp.watch(\n    ['src/**/*.js', 'test/**/*.js'],\n    ['lint', 'test']\n  );\n});\n\nfunction env(){\n  var dotenv  = require('dotenv'),\n      fs = require('fs'),\n      config = {},\n      file,\n      home = process.env.HOME;\n\n  // useful for storing common AWS credentials with other apps\n  if ( fs.existsSync(home + '/.awsrc') ){\n    file = fs.readFileSync(home + '/.awsrc');\n    _.extend(config, dotenv.parse(file));\n  }\n\n  if ( fs.existsSync('.env') ){\n    file = fs.readFileSync('.env');\n    _.extend(config, dotenv.parse(file));\n  }\n\n  // print out the env vars\n  _.each(config, function(value, key){\n    util.log('Env:', key, util.colors.cyan(value));\n  });\n\n  return config;\n}\n\n// gulp.task('watch', ['lint', 'test'], function () {\ngulp.task('watch', ['lint'], function () {\n  nodemon({\n    script: 'test.js',\n    ext: 'js html',\n    env: env()\n  // }).on('restart', ['lint', 'test']);\n  }).on('restart', ['lint']);\n});\n\ngulp.task('bump:patch', function(){\n  gulp.src('./package.json')\n    .pipe(bump({type: 'patch'}))\n    .pipe(gulp.dest('./'));\n});\ngulp.task('bump:minor', function(){\n  gulp.src('./package.json')\n    .pipe(bump({type: 'minor'}))\n    .pipe(gulp.dest('./'));\n});\ngulp.task('bump:major', function(){\n  gulp.src('./package.json')\n    .pipe(bump({type: 'major'}))\n    .pipe(gulp.dest('./'));\n});\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/config/development.js":"'use strict';\n\n\nvar env, express, morgan, errorHandler;\n\nenv          = require('./environment_vars');\nexpress      = require('express');\nmorgan       = require('morgan');\nerrorHandler = require('errorhandler');\n\nmodule.exports = function(app){\n\n  app.set('views', env.LOCAL_FILE_PATH + '/test');\n  app.engine('html', require('ejs').renderFile);\n  app.set('port', env.PORT || 3001);\n  app.use(morgan('dev'));\n  app.use(errorHandler());\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/config/production.js":"'use strict';\n\n\nvar express, morgan, errorHandler;\n\nexpress      = require('express');\nmorgan       = require('morgan');\nerrorHandler = require('errorhandler');\n\nmodule.exports = function(app){\n\n  app.set('port', process.env.PORT || 3001);\n  app.use(morgan('dev'));\n  app.use(errorHandler());\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/lib/dimensions.js":"'use strict';\n\nvar _ = require('lodash');\n\n\nfunction gravity(g, width, height, cropWidth, cropHeight){\n  var x, y;\n\n  // set the default x/y, same as gravity 'c' for center\n  x = width/2 - cropWidth/2;\n  y = height/2 - cropHeight/2;\n\n  switch(g){\n  case 'n':\n    y = 0;\n    break;\n  case 'ne':\n    x = width - cropWidth;\n    y = 0;\n    break;\n  case 'nw':\n    x = 0;\n    y = 0;\n    break;\n  case 's':\n    y = height - cropHeight;\n    break;\n  case 'se':\n    x = width - cropWidth;\n    y = height - cropHeight;\n    break;\n  case 'sw':\n    x = 0;\n    y = height - cropHeight;\n    break;\n  case 'e':\n    x = width - cropWidth;\n    break;\n  case 'w':\n    x = 0;\n    break;\n  }\n\n  // make sure we do not return numbers less than zero\n  if (x < 0){ x = 0; }\n  if (y < 0){ y = 0; }\n\n  return {\n    x: Math.floor(x),\n    y: Math.floor(y)\n  };\n}\nexports.gravity = gravity;\n\n\nfunction xy(modifiers, width, height, cropWidth, cropHeight){\n  var x,y, dims;\n\n  dims = gravity(modifiers.gravity, width, height, cropWidth, cropHeight);\n\n  if (_.has(modifiers, 'x')){\n    x = modifiers.x;\n    if (x <= width - cropWidth){\n      dims.x = modifiers.x;\n    }else{\n      // don't ignore modifier dimension\n      // instead, place within bounds\n      dims.x = width - cropWidth;\n    }\n  }\n\n  if (_.has(modifiers, 'y')){\n    y = modifiers.y;\n    if (y <= height - cropHeight){\n      dims.y = modifiers.y;\n    }else{\n      // don't ignore modifier dimension\n      // instead, place within bounds\n      dims.y = height - cropHeight;\n    }\n  }\n\n  return dims;\n}\nexports.xy = xy;\n\n\nexports.cropFill = function(modifiers, size){\n  var wd, ht,\n      newWd, newHt,\n      cropWidth, cropHeight,\n      crop;\n\n  if (modifiers.width === null){\n    modifiers.width = modifiers.height;\n  }\n  if (modifiers.height === null){\n    modifiers.height = modifiers.width;\n  }\n\n  if (modifiers.width > size.width && modifiers.height <= size.height) {\n    cropWidth = size.width;\n    cropHeight = modifiers.height;\n  } else if (modifiers.width <= size.width && modifiers.height > size.height) {\n    cropWidth = modifiers.width;\n    cropHeight = size.height;\n  } else if (modifiers.width > size.width && modifiers.height > size.height) {\n    cropWidth = size.width;\n    cropHeight = size.height;\n  } else {\n    cropWidth = modifiers.width;\n    cropHeight = modifiers.height;\n  }\n\n  wd = newWd = cropWidth;\n  ht = newHt = Math.round(newWd*(size.height/size.width));\n\n  if(newHt < cropHeight) {\n    ht = newHt = cropHeight;\n    wd = newWd = Math.round(newHt*(size.width/size.height));\n  }\n\n  // get the crop X/Y as defined by the gravity or x/y modifiers\n  crop = xy(modifiers, newWd, newHt, cropWidth, cropHeight);\n\n  return {\n    resize: {\n      width: wd,\n      height: ht\n    },\n    crop: {\n      width: cropWidth,\n      height: cropHeight,\n      x: crop.x,\n      y: crop.y\n    }\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/filter.js":"'use strict';\n\nvar map, filters, _;\n\nmap     = require('map-stream');\nfilters = require('./filters');\n_       = require('lodash');\n\n\nmodule.exports = function(){\n\n  return map(function(image, callback){\n\n    // pass through if there is an error\n    if (image.isError()){\n      return callback(null, image);\n    }\n\n    // let this pass through if we are requesting the metadata as JSON\n    if (image.modifiers.action === 'json'){\n      image.log.log('filter: json metadata call');\n      return callback(null, image);\n    }\n\n    var filter = image.modifiers.filter;\n\n    // don't attempt to process a filter if no appropriate modifier is set\n    if (typeof filter === 'undefined'){\n      image.log.log('filter:', image.log.colors.bold('none requested'));\n      return callback(null, image);\n    }\n\n    image.log.time('filter:'+ filter);\n\n    // run the appropriate filter\n    filters[image.modifiers.filter](image, function(err, data){\n      image.log.timeEnd('filter:'+ filter);\n\n      if (err) {\n        image.log.error('filter error', err);\n        image.error = new Error(err);\n      } else {\n        image.contents = data;\n      }\n\n      callback(null, image);\n    });\n\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/identify.js":"'use strict';\n\nvar sharp = require('sharp');\nvar map   = require('map-stream');\n\n\nmodule.exports = function(){\n\n  return map( function(image, callback){\n\n    if ( image.isError() ){\n      return callback(null, image);\n    }\n\n    if ( image.modifiers.action !== 'json' ){\n      image.log.log('identify:', image.log.colors.bold('no identify'));\n      return callback(null, image);\n    }\n\n    var handleResponse = function (err, data) {\n      image.log.timeEnd('identify');\n\n      if (err) {\n        image.log.error('identify error', err);\n        image.error = new Error(err);\n      }\n      else {\n        image.contents = data;\n      }\n\n      callback(null, image);\n    };\n\n    image.log.time('identify');\n\n    sharp(image.contents).metadata(handleResponse);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/optimize.js":"'use strict';\n\nvar sharp  = require('sharp');\nvar env    = require('../config/environment_vars');\nvar map    = require('map-stream');\n\n\nmodule.exports = function () {\n\n  return map( function (image, callback) {\n\n    // pass through if there is an error\n    if (image.isError()) {\n      return callback(null, image);\n    }\n\n    // let this pass through if we are requesting the metadata as JSON\n    if (image.modifiers.action === 'json'){\n      image.log.log('optimize: json metadata call');\n      return callback(null, image);\n    }\n\n    image.log.time('optimize-sharp:' + image.format);\n\n    var r = sharp(image.contents);\n\n    if (env.IMAGE_PROGRESSIVE) {\n      r.progressive();\n    }\n\n    // set the output quality\n    if (image.modifiers.quality < 100) {\n      r.quality(image.modifiers.quality);\n    }\n\n    // if a specific output format is specified, set it\n    if (image.outputFormat) {\n      r.toFormat(image.outputFormat);\n    }\n\n    // write out the optimised image to buffer and pass it on\n    r.toBuffer( function (err, buffer) {\n      if (err) {\n        image.log.error('optimize error', err);\n        image.error = new Error(err);\n      }\n      else {\n        image.contents = buffer;\n      }\n\n      image.log.timeEnd('optimize-sharp:' + image.format);\n      callback(null, image);\n    });\n  });\n\n};","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/resize.js":"'use strict';\n\nvar sharp = require('sharp');\nvar map   = require('map-stream');\nvar env   = require('../config/environment_vars');\nvar dims  = require('../lib/dimensions');\n\n\nmodule.exports = function () {\n\n  return map( function(image, callback) {\n\n    // do nothing if there is an error on the image object\n    if (image.isError()){\n      return callback(null, image);\n    }\n\n    // let this pass through if we are requesting the metadata as JSON\n    if (image.modifiers.action === 'json'){\n      image.log.log('resize: json metadata call');\n      return callback(null, image);\n    }\n\n    if (image.modifiers.action === 'original' && env.RESIZE_PROCESS_ORIGINAL === false){\n      image.log.log('resize: original no resize');\n      return callback(null, image);\n    }\n\n    image.log.time('resize');\n\n    var resizeResponse = function (err, buffer) {\n      if (err) {\n        image.log.error('resize error', err);\n        image.error = new Error(err);\n      }\n      else {\n        image.contents = buffer;\n      }\n\n      image.log.timeEnd('resize');\n      callback(null, image);\n    };\n\n    var r = sharp(image.contents);\n\n    // never enlarge an image beyond its original size, unless we're padding\n    // the image, as even though this can count as an \"enlargement\" the padded\n    // result can be reasonably generated in most cases.\n    if (image.modifiers.action !== 'crop' && image.modifiers.crop !== 'pad') {\n      r.withoutEnlargement();\n    }\n\n    // if allowed auto rotate images, very helpful for photos off of an iphone\n    // which are landscape by default and the metadata tells them what to show.\n    if (env.AUTO_ORIENT) {\n      r.rotate();\n    }\n\n    // by default we remove the metadata from resized images, setting the env\n    // var to false can retain it.\n    if (!env.REMOVE_METADATA) {\n      r.withMetadata();\n    }\n\n    var d, wd, ht;\n\n    switch(image.modifiers.action){\n    case 'original' :\n      r.toBuffer(resizeResponse);\n      break;\n\n    case 'resize':\n      r.resize(image.modifiers.width, image.modifiers.height);\n      r.max();\n      r.toBuffer(resizeResponse);\n      break;\n\n    case 'square':\n      r.metadata(function(err, metadata){\n        if (err){\n          image.error = new Error(err);\n          callback(null, image);\n          return;\n        }\n\n        d = dims.cropFill(image.modifiers, metadata);\n\n        // resize then crop the image\n        r.resize(\n            d.resize.width,\n            d.resize.height\n          ).extract(\n            d.crop.y,\n            d.crop.x,\n            d.crop.width,\n            d.crop.height\n          );\n\n        r.toBuffer(resizeResponse);\n      });\n\n      break;\n\n    case 'crop':\n      r.metadata(function(err, size){\n        if (err){\n          image.error = new Error(err);\n          callback(null, image);\n          return;\n        }\n\n        switch(image.modifiers.crop){\n        case 'fit':\n          r.resize(image.modifiers.width, image.modifiers.height);\n          r.max();\n          break;\n        case 'fill':\n          d = dims.cropFill(image.modifiers, size);\n\n          r.resize(\n              d.resize.width,\n              d.resize.height\n            ).extract(\n              d.crop.y,\n              d.crop.x,\n              d.crop.width,\n              d.crop.height\n            );\n          break;\n        case 'cut':\n          wd = image.modifiers.width || image.modifiers.height;\n          ht = image.modifiers.height || image.modifiers.width;\n\n          d = dims.gravity(\n            image.modifiers.gravity,\n            size.width,\n            size.height,\n            wd,\n            ht\n          );\n          r.extract(d.y, d.x, wd, ht);\n          break;\n        case 'scale':\n          // TODO: deal with scale\n          r.resize(image.modifiers.width, image.modifiers.height);\n          break;\n        case 'pad':\n          r.resize(\n            image.modifiers.width,\n            image.modifiers.height\n          ).background(env.IMAGE_PADDING_COLOR || 'white').embed();\n        }\n\n        r.toBuffer(resizeResponse);\n      });\n\n      break;\n    }\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/response.js":"'use strict';\n\nvar fs     = require('fs');\nvar stream = require('stream');\nvar env    = require('../config/environment_vars');\nvar util   = require('util');\n\n\nfunction ResponseWriter(request, response){\n  if (!(this instanceof ResponseWriter)){\n    return new ResponseWriter(request, response);\n  }\n\n  this.request = request;\n  this.response = response;\n\n  stream.Writable.call(this, { objectMode : true });\n}\n\nutil.inherits(ResponseWriter, stream.Writable);\n\n\nResponseWriter.prototype.expiresIn = function(maxAge){\n  var dt = Date.now();\n  dt += maxAge * 1000;\n\n  return (new Date(dt)).toGMTString();\n};\n\n\nResponseWriter.prototype.shouldCacheResponse = function(){\n  if (env.development){\n    if (env.CACHE_DEV_REQUESTS){\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n\nResponseWriter.prototype._write = function(image){\n  if (image.isError()){\n    image.log.error(image.error.message);\n    image.log.flush();\n    var statusCode = image.error.statusCode || 500;\n\n    if (statusCode === 404 && env.IMAGE_404) {\n      this.response.status(404);\n      fs.createReadStream(env.IMAGE_404).pipe(this.response);\n    }\n    else {\n      this.response.status(statusCode).end();\n    }\n\n    return;\n  }\n\n  if (image.modifiers.action === 'json'){\n    if (this.shouldCacheResponse()){\n      this.response.set({\n        'Cache-Control':  'public',\n        'Expires':        this.expiresIn(env.JSON_EXPIRY),\n        'Last-Modified':  (new Date(1000)).toGMTString(),\n        'Vary':           'Accept-Encoding'\n      });\n    }\n\n    this.response.status(200).json(image.contents);\n    image.log.flush();\n\n    return this.end();\n  }\n\n  if (this.shouldCacheResponse()){\n    this.response.set({\n      'Cache-Control':  'public',\n      'Expires':        this.expiresIn(image.expiry),\n      'Last-Modified':  (new Date(1000)).toGMTString(),\n      'Vary':           'Accept-Encoding'\n    });\n  }\n\n  this.response.type(image.format);\n\n  if (image.isStream()){\n    image.contents.pipe(this.response);\n  }\n\n  else {\n    image.log.log(\n      'original image size:',\n      image.log.colors.grey(\n        (image.originalContentLength/1000).toString() + 'kb'\n      )\n    );\n    image.log.log(\n      'size saving:',\n      image.log.colors.grey(image.sizeSaving() + '%')\n    );\n\n    // as a debugging step print a checksum for the modified image, so we can\n    // track to see if the image is replicated effectively between requests\n    if (env.development){\n      var crypto = require('crypto'),\n          shasum = crypto.createHash('sha1');\n      shasum.update(image.contents);\n      image.log.log('checksum', shasum.digest('hex'));\n    }\n\n    this.response.status(200).send(image.contents);\n  }\n\n  // flush the log messages and close the connection\n  image.log.flush();\n  this.end();\n};\n\n\nmodule.exports = ResponseWriter;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/filters/greyscale.js":"'use strict';\n\nvar sharp = require('sharp');\n\n\nmodule.exports = function(image, callback){\n\n  // create the sharp object\n  var r = sharp(image.contents);\n\n  // apply the filter and pass on the stream\n  r.gamma().greyscale().toBuffer(callback);\n\n};\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/sources/facebook.js":"'use strict';\n\nvar stream, util, request, env;\n\nstream  = require('stream');\nutil    = require('util');\nrequest = require('request');\nenv     = require('../../config/environment_vars');\n\n// function contentLength(bufs){\n//   return bufs.reduce(function(sum, buf){\n//     return sum + buf.length;\n//   }, 0);\n// }\n\nfunction Facebook(image){\n  /* jshint validthis:true */\n  if (!(this instanceof Facebook)){\n    return new Facebook(image);\n  }\n  stream.Readable.call(this, { objectMode : true });\n  this.image = image;\n  this.ended = false;\n\n  // set the expiry value to the shorter value\n  this.image.expiry = env.IMAGE_EXPIRY_SHORT;\n}\n\nutil.inherits(Facebook, stream.Readable);\n\nFacebook.prototype._read = function(){\n  var _this = this,\n      url;\n\n  if ( this.ended ){ return; }\n\n  // pass through if there is an error on the image object\n  if (this.image.isError()){\n    this.ended = true;\n    this.push(this.image);\n    return this.push(null);\n  }\n\n  var fbUid = this.image.image.split('.').slice(0,-1).join('.');\n\n  url = 'https://graph.facebook.com/' + fbUid + '/picture?type=large';\n\n  this.image.log.time('facebook');\n\n  var opts = {\n    url: url,\n    encoding: null\n  };\n\n  request(opts, function (err, response, body) {\n    _this.image.log.timeEnd('facebook');\n\n    if (err) {\n      _this.image.error = err;\n    }\n    else {\n      if (response.statusCode === 200) {\n        _this.image.contents = body;\n        _this.image.originalContentLength = body.length;\n        _this.ended = true;\n      }\n      else {\n        _this.image.error = new Error('Facebook user image not found');\n        _this.image.error.statusCode = 404;\n      }\n    }\n\n    _this.push(_this.image);\n    _this.push(null);\n  });\n\n};\n\n\nmodule.exports = Facebook;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/sources/local.js":"'use strict';\n\nvar env, fs, stream, util;\n\nenv    = require('../../config/environment_vars');\nfs     = require('fs');\nstream = require('stream');\nutil   = require('util');\n\n\nfunction Local(image){\n  /* jshint validthis:true */\n  if (!(this instanceof Local)){\n    return new Local(image);\n  }\n  stream.Readable.call(this, { objectMode : true });\n  this.image = image;\n  this.path = image.path.replace(/^elocal/i,'');\n  this.filePath = env.LOCAL_FILE_PATH + '/' + this.path;\n  this.ended = false;\n}\n\nutil.inherits(Local, stream.Readable);\n\nLocal.prototype._read = function(){\n  var _this = this;\n\n  if ( this.ended ){ return; }\n\n  // pass through if there is an error on the image object\n  if (this.image.isError()){\n    this.ended = true;\n    this.push(this.image);\n    return this.push(null);\n  }\n\n  this.image.log.time('local filesystem');\n\n  fs.readFile(this.filePath, function(err, data){\n    _this.image.log.timeEnd('local filesystem');\n\n    // if there is an error store it on the image object and pass it along\n    if (err) {\n      _this.image.error = err;\n\n      if (err.code === 'ENOENT') {\n        _this.image.error.statusCode = 404;\n      }\n    }\n\n    // if not store the image buffer\n    else {\n      _this.image.contents = data;\n      _this.image.originalContentLength = data.length;\n    }\n\n    _this.ended = true;\n    _this.push(_this.image);\n    _this.push(null);\n  });\n};\n\n\nmodule.exports = Local;","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/sources/s3.js":"'use strict';\n\nvar env, s3, stream, util, client, bucket;\n\nenv    = require('../../config/environment_vars');\ns3     = require('aws-sdk').S3;\nstream = require('stream');\nutil   = require('util');\n\ntry {\n  // create an AWS S3 client with the config data\n  client = new s3({\n    accessKeyId: env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: env.AWS_SECRET_ACCESS_KEY,\n    region: env.AWS_REGION\n  });\n  bucket = env.S3_BUCKET;\n} catch(e) {\n\n}\n\n\nfunction s3Stream(image){\n  /* jshint validthis:true */\n  if (!(this instanceof s3Stream)){\n    return new s3Stream(image);\n  }\n  stream.Readable.call(this, { objectMode : true });\n  this.image = image;\n  this.ended = false;\n}\n\nutil.inherits(s3Stream, stream.Readable);\n\ns3Stream.prototype._read = function(){\n  var _this = this;\n\n  if ( this.ended ){ return; }\n\n  // pass through if there is an error on the image object\n  if (this.image.isError()){\n    this.ended = true;\n    this.push(this.image);\n    return this.push(null);\n  }\n\n  // Set the AWS options\n  var awsOptions = {\n    Bucket: bucket,\n    Key: this.image.path.replace(/^\\//,'')\n  };\n\n  this.image.log.time('s3');\n\n  client.getObject(awsOptions, function(err, data){\n    _this.image.log.timeEnd('s3');\n\n    // if there is an error store it on the image object and pass it along\n    if (err) {\n      _this.image.error = err;\n    }\n\n    // if not store the image buffer\n    else {\n      _this.image.contents = data.Body;\n      _this.image.originalContentLength = data.Body.length;\n    }\n\n    _this.ended = true;\n    _this.push(_this.image);\n    _this.push(null);\n  });\n};\n\n\nmodule.exports = s3Stream;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/sources/twitter.js":"'use strict';\n\nvar stream, util, env, Twit, t, request, _;\n\nstream  = require('stream');\nutil    = require('util');\nenv     = require('../../config/environment_vars');\nTwit    = require('twit');\nrequest = require('request');\n_       = require('lodash');\n\n/* jshint camelcase:false */\ntry {\n  t = new Twit({\n    consumer_key:         env.TWITTER_CONSUMER_KEY,\n    consumer_secret:      env.TWITTER_CONSUMER_SECRET,\n    access_token:         env.TWITTER_ACCESS_TOKEN,\n    access_token_secret:  env.TWITTER_ACCESS_TOKEN_SECRET\n  });\n} catch(e){\n\n}\n\n\nfunction Twitter(image){\n  /* jshint validthis:true */\n  if (!(this instanceof Twitter)){\n    return new Twitter(image);\n  }\n  stream.Readable.call(this, { objectMode : true });\n  this.image = image;\n  this.ended = false;\n\n  // set the expiry value to the shorter value\n  this.image.expiry = env.IMAGE_EXPIRY_SHORT;\n}\n\nutil.inherits(Twitter, stream.Readable);\n\nTwitter.prototype._read = function(){\n  var _this = this,\n      profileId, queryString;\n\n  if ( this.ended ){ return; }\n\n  // pass through if there is an error on the image object\n  if (this.image.isError()){\n    this.ended = true;\n    this.push(this.image);\n    return this.push(null);\n  }\n\n  // pass through the stream with an error if the twit library didnt start\n  if (!t){\n    this.image.error = new Error('Need valid twitter credentials');\n    this.push(this.image);\n    return this.push(null);\n  }\n\n  var endStream = function(){\n    _this.ended = true;\n    _this.push(_this.image);\n    _this.push(null);\n  };\n\n  this.image.log.time('twitter');\n\n  profileId = this.image.image.split('.')[0];\n\n  if (_.isNaN(profileId * 1)){\n    queryString = {screen_name: profileId};\n  } else {\n    queryString = {user_id: profileId};\n  }\n\n  t.get('users/show', queryString, function(err, data){\n    if (err){\n      _this.image.error = new Error(err);\n      endStream();\n    }\n    else {\n      /* jshint camelcase:false */\n      var imageUrl = data.profile_image_url\n        .replace('_normal', '')\n        .replace('_bigger', '')\n        .replace('_mini', '');\n\n      var opts = {\n        url: imageUrl,\n        encoding: null\n      };\n\n      request(opts, function (err, response, body) {\n        _this.image.log.timeEnd('twitter');\n\n        if (err) {\n          _this.image.error = err;\n        }\n        else {\n          if (response.statusCode === 200) {\n            _this.image.contents = body;\n            _this.image.originalContentLength = body.length;\n            _this.ended = true;\n          }\n          else {\n            _this.image.error = new Error('Twitter user image not found');\n            _this.image.error.statusCode = 404;\n          }\n        }\n\n        _this.push(_this.image);\n        _this.push(null);\n      });\n\n    }\n  });\n\n};\n\n\nmodule.exports = Twitter;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/sources/vimeo.js":"'use strict';\n\nvar stream  = require('stream');\nvar util    = require('util');\nvar request = require('request');\nvar env     = require('../../config/environment_vars');\n\n\nfunction Vimeo(image){\n  /* jshint validthis:true */\n  if (!(this instanceof Vimeo)){\n    return new Vimeo(image);\n  }\n  stream.Readable.call(this, { objectMode : true });\n  this.image = image;\n  this.ended = false;\n\n  // set the expiry value to the shorter value\n  this.image.expiry = env.IMAGE_EXPIRY_SHORT;\n}\n\nutil.inherits(Vimeo, stream.Readable);\n\nVimeo.prototype._read = function(){\n  var _this = this,\n      url, videoId;\n\n  if ( this.ended ){ return; }\n\n  // pass through if there is an error on the image object\n  if (this.image.isError()){\n    this.ended = true;\n    this.push(this.image);\n    return this.push(null);\n  }\n\n  var endStream = function(){\n    _this.ended = true;\n    _this.push(_this.image);\n    _this.push(null);\n  };\n\n  this.image.log.time('vimeo');\n  videoId = this.image.image.split('.')[0];\n  url = 'http://vimeo.com/api/v2/video/' + videoId + '.json';\n\n  request(url, function(err, response, body){\n    if (err){\n      _this.image.error = new Error(err);\n      endStream();\n    }\n    else {\n      var json = JSON.parse(body);\n\n      /* jshint camelcase:false */\n      var imageUrl = json[0].thumbnail_large;\n      imageUrl = imageUrl.replace('_640.jpg', '');\n\n      var opts = {\n        url: imageUrl,\n        encoding: null\n      };\n\n      request(opts, function (err, response, body) {\n        _this.image.log.timeEnd('vimeo');\n\n        if (err) {\n          _this.image.error = err;\n        }\n        else {\n          if (response.statusCode === 200) {\n            _this.image.contents = body;\n            _this.image.originalContentLength = body.length;\n            _this.ended = true;\n          }\n          else {\n            _this.image.error = new Error('Vimeo image not found');\n            _this.image.error.statusCode = 404;\n          }\n        }\n\n        _this.push(_this.image);\n        _this.push(null);\n      });\n\n    }\n  });\n\n};\n\n\nmodule.exports = Vimeo;\n","/home/travis/build/npmtest/node-npmtest-image-resizer/node_modules/image-resizer/src/streams/sources/youtube.js":"'use strict';\n\nvar stream, util, request, env;\n\nstream  = require('stream');\nutil    = require('util');\nrequest = require('request');\nenv     = require('../../config/environment_vars');\n\n\nfunction Youtube(image){\n  /* jshint validthis:true */\n  if (!(this instanceof Youtube)){\n    return new Youtube(image);\n  }\n  stream.Readable.call(this, { objectMode : true });\n  this.image = image;\n  this.ended = false;\n\n  // set the expiry value to the shorter value\n  this.image.expiry = env.IMAGE_EXPIRY_SHORT;\n}\n\nutil.inherits(Youtube, stream.Readable);\n\nYoutube.prototype._read = function(){\n  var _this = this,\n      url, videoId;\n\n  if ( this.ended ){ return; }\n\n  // pass through if there is an error on the image object\n  if (this.image.isError()){\n    this.ended = true;\n    this.push(this.image);\n    return this.push(null);\n  }\n\n  videoId = this.image.image.split('.')[0];\n  url = 'http://img.youtube.com/vi/' + videoId + '/hqdefault.jpg';\n\n  this.image.log.time('youtube');\n\n  var opts = {\n    url: url,\n    encoding: null\n  };\n\n  request(opts, function (err, response, body) {\n    _this.image.log.timeEnd('youtube');\n\n    if (err) {\n      _this.image.error = err;\n    }\n    else {\n      if (response.statusCode === 200) {\n        _this.image.contents = body;\n        _this.image.originalContentLength = body.length;\n        _this.ended = true;\n      }\n      else {\n        _this.image.error = new Error('Youtube image not found');\n        _this.image.error.statusCode = 404;\n      }\n    }\n\n    _this.push(_this.image);\n    _this.push(null);\n  });\n\n};\n\n\nmodule.exports = Youtube;\n\n// http://stackoverflow.com/questions/2068344/how-do-i-get-a-youtube-video-thumbnail-from-the-youtube-api\n\n// you can also get json data about a Youtube vid like this:\n//  - http://gdata.youtube.com/feeds/api/videos/lK1vPu6U2B0?v=2&alt=jsonc\n"}